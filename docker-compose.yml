# Levanta 2 bases de datos: MongoDB y Redis, y un explorador o admin web para
# administrarlas. También levanta RabbitMQ, un message broker para la
# comunicación.

# Puertos de cada servicio por defecto:
# - MongoDB: 27017
# - MongoExpress: 8080
# - Redis: 6379
# - RedisCommander: 8081
# - RabbitMQ: puerto por defecto.

# Levantar todos los servicios:
# docker-compose up -d
# Levantar algunos servicios:
# docker-compose up -d mongo redis rabbitmq


version: '3.5'

services:
  mongo:
    image: mongo:latest
    restart: always
    ports:
      - "${MONGO_PORT:-27017}:27017"
    environment:
      # MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      # MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-admin}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-database}
    volumes:
      - mongo:/data/db
    networks:
      - mongo

  mongo-express:
    image: mongo-express:latest
    restart: always
    ports:
      - "${MONGO_EXPRESS_PORT:-8080}:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD:-passwd}
    networks:
      - mongo
    depends_on:
      - mongo

  redis:
    image: redis
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - redis

  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: always
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    environment:
      REDIS_HOSTS: local:redis:${REDIS_PORT:-6379}
    networks:
      - redis
    depends_on:
      - redis

  rabbitmq:
    image: rabbitmq:3.7-management
    restart: always
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-8082}:15672"
    networks:
      - rabbitmq

volumes:
  mongo:

networks:
  mongo:
    driver: bridge
  redis:
    driver: bridge
  rabbitmq:
    driver: bridge